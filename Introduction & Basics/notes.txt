It is important to put the important stuffs on paper, what this entails is creating flowcharts and pseudocode. This helps have clearer understanding 
of the flow of execution of the program.

#IDEAS

In designing flowcharts, we should follow the following guidelines

1. Write state and instruction steps in rectangles
2. Write decision steps in diamonds
3. connect sequential steps with arrows.
4. Mark the start and the end of the process or program.

Pseudocode:  Human friendly method of representing computer programs.

Mathematical Models: Models basically represents a problem and its characteristics. It is important to understand these models as they help to know
how a problem should be approached, either, quadractically, logarithmically, with graph theory etc. very important concept.


##LOGIC
In logic, variables and operators represent the validity of things rather than modelling numerical problems like in math.
For instance, the validity of the expression “if the pool is warm, I’ll swim” is based on two variables
A = the pool is warm
B = i swim
A -> B 

Dependency between variables is expressed with a conditional operator such as [!, ->, etc].

A contrapositive statement simply implies A-> B is the same !A -> !B, like in the example above, the pool is cold (!A) and i dont swim (!B)

BiConditional statement (A <--> B), in the example above,  this statement means i'll only swim if and only if the pool is warm.

AND, OR, Exclusive OR: These are the most popular logical operators around.
A = drank Wine
B = drank vodka

AND means dranked mixed drinks
OR means you drank, whether mixed or now
ExOR means You didn't mix the drinks but drank.

Boolean Algebra: Algebra in relation to boolean expressions.
a. Associativity: mutliplications and sums in parenthesis can be calculated in any order. A AND (B AND C) = (A AND B) AND C 
b. Distributivity: A OR (B AND C) == (A OR B) AND (A OR C)
c. De'Morgan's law : basically states that ANDS can be transformed into ORs and vice versa !(A AND B) = !A OR !B. 
an example reads, A server crashes if it’s overheating while the air conditioning is off. It also crashes if it’s overheating and its chassis cooler fails. In which conditions does the server work?

The logical statements here:
A = overheating
B =  air conditioning if off
c = chassis cooler fails
D = server crashes

for the server to crash, this expression can be dervied:  (A AND B) OR (A AND C) -> D
simplify this expression with Distributivity and you have:  A AND (B OR C) -> D
To find when the server does not crash (!D), we can use the contrapositive expression: !(A AND (B OR C)) -> !D
we can use De'Morgan's law to remove the parenthesis: !A OR !(B OR C) => !D = !A OR (!B AND !C) -> !D. final simplified form for this problem.


##COUNTING: This involves processes like mutliplication, permutations (!n), combinations (n choose m), sums = [ n( n + 1) / 2]

##PROBABILITY: basically describes the chance of an event happening. it is the number of way an event can occur divided by the total number of possible outcomes.
When the outcome of an event does not have an effect on the outcome of another event, it is said to be INDEPENDENT.
When two outcomes cannot simultaneously occur, they are said to be MUTUALLY EXCLUSIVE and if two events are need to be mutually exclusive then summing up their probabilities should do the trick.
When all mutually exclusive events cover all the possible outcomes, it is said to be complimentary, the sum of all complimentary events should equal 100%.

An example, Your castle is defended by five towers. Each tower has a 20% probability of disabling an invader before he reaches the gate. What are the chances of stopping him?

If the probability of each tower stopping him is 20% then the probability of them missing is 80% and since we are dealing with 5 towers, the find the culmulative probability, 
which results to (0.8 raised to 5) = 0.33, this is the probability of them missing, to then finding the probability of them stopping him, we recall that the sum of complimentary probability is equal to 100%, hence we have 1 -0.33 = 0.67. The probability of stopping the intruder is set at 67%.


/* This section is from Data structures and algorithmic thinking with Python */